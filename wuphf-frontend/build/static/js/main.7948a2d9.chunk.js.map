{"version":3,"sources":["resources/audio/wuphf_wuphfalert.wav","resources/images/logo.png","components/WuphfForm/WuphfForm.js","components/WuphfForm/index.js","components/PaypalDonate/index.js","components/PaypalDonate/PaypalDonate.js","constants/formOptions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","wuphfSentAudio","Audio","wuphfSentAudioPath","WuphfForm","props","formFields","formOptions","forEach","option","key","state","errorMsg","loading","e","preventDefault","this","setState","formData","FormData","append","axios","post","then","_","play","catch","error","response","data","target","name","value","map","i","className","inputType","id","placeholder","onChange","handleChange","bind","required","type","alt","src","wuphfLogo","onSubmit","onFormSubmit","renderFormOptions","size","color","React","Component","PaypalDonate","style","padding","maxWidth","fontSize","action","method","border","title","width","height","App","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7948a2d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wuphf_wuphfalert.255f0e16.wav\";","module.exports = __webpack_public_path__ + \"static/media/logo.17bc4435.png\";","import axios from 'axios';\nimport React from 'react';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport wuphfSentAudioPath from '../../resources/audio/wuphf_wuphfalert.wav';\nimport wuphfLogo from '../../resources/images/logo.png';\nimport './WuphfForm.css';\n\nconst wuphfSentAudio = new Audio(wuphfSentAudioPath);\n\nexport default class WuphfForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    var formFields = {};\n    this.props.formOptions.forEach(option => {\n      formFields[option.key] = '';\n    });\n\n    this.state = {\n      formFields: formFields,\n      errorMsg: '',\n      loading: false\n    };\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault();\n\n    this.setState({\n      errorMsg: '',\n      loading: true\n    });\n\n    var formData = new FormData();\n    this.props.formOptions.forEach(option => {\n      formData.append(option.key, this.state.formFields[option.key]);\n    });\n\n    axios\n      .post('/api/wuphf', formData)\n      .then(_ => {\n        wuphfSentAudio.play();\n        this.setState({\n          loading: false\n        });\n      })\n      .catch(error => {\n        this.setState({\n          errorMsg: error.response.data,\n          loading: false\n        });\n      });\n  }\n\n  handleChange(e) {\n    let formFields = { ...this.state.formFields };\n    formFields[e.target.name] = e.target.value;\n\n    this.setState({\n      formFields\n    });\n  }\n\n  renderFormOptions() {\n    const { formOptions } = this.props;\n\n    let formUI = formOptions.map((option, i) => (\n      <div key={i} className='wuphf-form-input-div'>\n        {option.inputType === 'textarea' ? (\n          <textarea\n            className='wuphf-form-textarea'\n            id={option.key}\n            name={option.key}\n            placeholder={option.placeholder}\n            onChange={this.handleChange.bind(this)}\n            value={this.state.formFields[option.key]}\n            required={option.required}\n          />\n        ) : (\n          <input\n            className='wuphf-form-input'\n            type={option.inputType}\n            id={option.key}\n            name={option.key}\n            placeholder={option.placeholder}\n            onChange={this.handleChange.bind(this)}\n            value={this.state.formFields[option.key]}\n            required={option.required}\n          />\n        )}\n      </div>\n    ));\n    return formUI;\n  }\n\n  render() {\n    return (\n      <div className='wuphf-form'>\n        <img alt='WUPHF Logo' src={wuphfLogo} className='logo-image' />\n        <form onSubmit={this.onFormSubmit.bind(this)}>\n          {this.renderFormOptions()}\n          <button className='wuphf-submit-button'>Send Wuphf!</button>\n        </form>\n        <div className='wuphf-error'>{this.state.errorMsg}</div>\n        <div className='loading-spinner'>\n          <ClipLoader\n            size={100}\n            color={'#524A93'}\n            loading={this.state.loading}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import WuphfForm from './WuphfForm';\n\nexport default WuphfForm;\n","import PaypalDonate from './PaypalDonate';\n\nexport default PaypalDonate;\n","import React from 'react';\n\nexport default class PaypalDonate extends React.Component {\n  render() {\n    return (\n      <div\n        style={{\n          padding: '10px'\n        }}\n      >\n        <p\n          style={{\n            color: 'white',\n            maxWidth: '9vw',\n            fontSize: '0.8rem'\n          }}\n        >\n          Each WUPHF costs me $, any donations welcomed :)\n        </p>\n        <form\n          action='https://www.paypal.com/cgi-bin/webscr'\n          method='post'\n          target='_blank'\n        >\n          <input type='hidden' name='cmd' value='_donations' />\n          <input type='hidden' name='business' value='2ST2DPURPKP5U' />\n          <input type='hidden' name='currency_code' value='USD' />\n          <input\n            type='image'\n            src='https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif'\n            border='0'\n            name='submit'\n            title='PayPal - The safer, easier way to pay online!'\n            alt='Donate with PayPal button'\n          />\n          <img\n            alt=''\n            border='0'\n            src='https://www.paypal.com/en_US/i/scr/pixel.gif'\n            width='1'\n            height='1'\n          />\n        </form>\n      </div>\n    );\n  }\n}\n","export const formOptions = [\n  {\n    key: 'from_name',\n    placeholder: 'Your name',\n    inputType: 'text',\n    required: true\n  },\n  {\n    key: 'sms_number',\n    placeholder: 'Recipients phone number for an SMS',\n    inputType: 'tel',\n    required: false\n  },\n  {\n    key: 'call_number',\n    placeholder: 'Recipients phone number for a phone call',\n    inputType: 'tel',\n    required: false\n  },\n  {\n    key: 'to_email',\n    placeholder: 'Recipients email address',\n    inputType: 'email',\n    required: false\n  },\n  {\n    key: 'message',\n    placeholder: 'What do you want the WUPHF to say?',\n    inputType: 'textarea',\n    required: true\n  },\n  {\n    key: 'website',\n    placeholder: '',\n    inputType: 'text',\n    required: false\n  }\n];\n","import React from 'react';\nimport './App.css';\nimport { WuphfForm, PaypalDonate } from './components';\nimport { formOptions } from './constants/formOptions';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <WuphfForm formOptions={formOptions}></WuphfForm>\n      <div className='donate'>\n        <PaypalDonate></PaypalDonate>\n      </div>\n      <div>\n        <a\n          className='github-link'\n          href='https://github.com/brandenc40/WUPHF.com'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          Github\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}